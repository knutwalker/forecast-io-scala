{"name":"Forecast-io-scala","tagline":"Scala wrapper library for the v2 Forecast API provided by The Dark Sky Company, LLC. Based on https://github.com/MartinSeeler/forecast-io-wrapper","body":"forecast-io-scala\r\n=================\r\n\r\nhttp://blog.knutwalker.de/forecast-io-wrapper/\r\n\r\nScala wrapper library for the v2 Forecast API provided by The Dark Sky Company, LLC.\r\n\r\n> Based on https://github.com/MartinSeeler/forecast-io-wrapper\r\n\r\nThe Scala wrapper runs on top of [Akka](http://akka.io).\r\n\r\n## About\r\n\r\nThe Forecast API lets you query for most locations on the globe, and returns:\r\n\r\n- Current conditions\r\n- Minute-by-minute forecasts out to 1 hour (where available)\r\n- Hour-by-hour forecasts out to 48 hours\r\n- Day-by-day forecasts out to 7 days\r\n\r\n\r\n## Usage\r\n\r\n### Samples\r\n\r\nA simple request for the current temperature:\r\n```scala\r\n// specify your API key\r\nval apiKey = \"replace-with-your-key\"\r\nval forecastIO = ForecastIO(apiKey)\r\n\r\n// coordinates for Dresden, Germany\r\nval latitude = 51.0504\r\nval longitude = 13.7373\r\n\r\n// For asynchronous execution\r\nimport ForecastIO.executionContext\r\n\r\n// retrieve the current forecast\r\nval forecast = forecastIO(latitude, longitude)\r\n\r\n// deal with the result when it is available\r\nforecast.foreach { result =>\r\n  println(s\"Current temperature is ${result.currently.map(_.temperature)}\")\r\n  println(s\"Apparent temperature is ${result.currently.map(_.apparentTemperature)\")\r\n}\r\n```\r\n\r\n`ForecastIo.apply` simply returns a `Future[Forecast]`.\r\n`Forecast` and other nested POJOs are all case classes, so you can pattern match all the way through:\r\n```scala\r\n// specify your API key\r\nval apiKey = \"replace-with-your-key\"\r\nval forecastIO = ForecastIO(apiKey)\r\n\r\n// coordinates for Dresden, Germany\r\nval latitude = 51.0504\r\nval longitude = 13.7373\r\n\r\n// For asynchronous execution\r\nimport ForecastIO.executionContext\r\n\r\n// retrieve the current forecast\r\nval forecast = forecastIO(latitude, longitude)\r\n\r\n// deal with the result when it is available\r\nforecast onComplete {\r\n\r\n  case Success(Forecast(_, _, timezone, _, Some(HourlyDataPoint(_, _, temperature, _, _, _, _, _)), _, _, Some(DailyDataBlock(_, _, Vector(DailyDataPoint(_, sunset), _*))))) =>\r\n\r\n    println(s\"It is $temperature degrees in $timezone and the sun sets at $sunset\")\r\n}\r\n```\r\n\r\n### Java API\r\n\r\n`forecast-io-scala` also tries to provide a proper Java API, similar to [`forecast-io-wrapper`](https://github.com/MartinSeeler/forecast-io-wrapper)s.\r\n\r\n```java\r\n// specify your API key\r\nfinal String apiKey = \"replace-with-your-key\";\r\nfinal ForecastIO forecastIO = new ForecastIO(apiKey);\r\n\r\n// coordinates for Dresden, Germany\r\nfinal double latitude = 51.0504d;\r\nfinal double longitude = 13.7373d;\r\n\r\n// retrieve the current forecast\r\nfinal Forecast forecast = forecastIO.getForecast(latitude, longitude);\r\n\r\nSystem.out.println(\"Current temperature is \" + forecast.getCurrently().getTemperature());\r\nSystem.out.println(\"Apparent temperature is \" + forecast.getCurrently().getApparentTemperature());\r\n```\r\n\r\nThat is teh traditional blocking API. In addition to that, `forecast-io-scala` also provides an asynchronous API for Java\r\n\r\n```java\r\n// specify your API key\r\nfinal String apiKey = \"replace-with-your-key\";\r\nfinal ForecastIO forecastIO = new ForecastIO(apiKey);\r\n\r\n// coordinates for Dresden, Germany\r\nfinal double latitude = 51.0504d;\r\nfinal double longitude = 13.7373d;\r\n\r\n// retrieve the current forecast\r\nforecastIO.asyncForecast(latitude, longitude, new Callback<Forecast>() {\r\n    @Override\r\n    public void onSuccess(Forecast result) {\r\n\r\n        System.out.println(\"Current temperature is \" + result.getCurrently().getTemperature());\r\n        System.out.println(\"Apparent temperature is \" + result.getCurrently().getApparentTemperature());\r\n    }\r\n\r\n    @Override\r\n    public void onFailure(Throwable t) {}\r\n});\r\n```\r\n\r\n\r\n### Shutdown\r\n\r\n`forecast-io-scala` runs on top of [Akka](http://akka.io) and thus, needs to be shutdown properly.\r\nYou can do so beu calling either the static or the instance method `shutdown()` on `ForecastIO`\r\n\r\nIf omit the shutdown, your JVM will not terminate and you have to kill it abruptly.\r\n\r\n\r\n## Development\r\n\r\nYou'll only need [sbt](http://www.scala-sbt.org/) and a JDK 7.\r\nScala, Akka, Spray and other dependencies are downloaded during the build process.\r\n\r\n\r\n### Fatjar\r\n\r\n`forecast-io-scala` features a fatjar, that prints some simple information about some place.\r\nYou can build the jar with `sbt assembly` and use it like so:\r\n```bash\r\njava -jar -Dforecast.apikey=\"your-api-key-here\" target/scala-2.10/forecast-io-scala-0.1.0.jar 13.37 42\r\n```\r\n\r\n### Scaladoc\r\n\r\nScaladoc is available at http://blog.knutwalker.de/forecast-io-wrapper/current/\r\n","google":"UA-45861502-3","note":"Don't delete this file! It's used internally to help with page regeneration."}